Brainstorm dos Arquivos de Indices:


Arquivos invertidos para:
WOB (artista e música),
Peak rank,
BWA (Quantidade de aparições na melhor semana) (talvez)
    Ex.:
        Peak rank:
        1 -> indice1 -> indice2 -> indice3      (índices em ordem alfabética) (é, tem q dumpar a ideia de rank->wob->alfabética)
        2 -> indice1 -> ...
        3 ...
        ...
        100 -> ...

Já soluciona problema e faz impressão invertida sem ordem +secundaria invertida

peak rank:
##########################
pr = peak_rank_da_música

ii_pr= open(nome_arquivo, [w sem reescrever], [0])

pr= pr-1

pr \n's

vai pro fim e escreve

ii_pr.close()

from collections import defaultdict

class InvertedIndex(object):
    def __init__(self):
        # Map from a feature string like "ccO" to an integer feature id
        self.feature_to_id = {}
        # Map from an integer feature id to a set of record ids
        self.inverted_indices = defaultdict(set)

    def get_feature_id(self, feature):
        try:
            return self.feature_to_id[feature]
        except KeyError:
            n = len(self.feature_to_id)
            self.feature_to_id[feature] = n
            return n

    def add_record(self, id, feature_ids):
        for feature_id in feature_ids:
            self.inverted_indices[feature_id].add(id)

    def search(self, features):
        # These are *features*, not *feature_ids*.
        # If the feature wasn't seen before then there are no entries
        # and this will raise a KeyError, meaning nothing found.
        try:
            terms = [self.inverted_indices[self.feature_to_id[feature]] for feature in features]
        except KeyError:
            return set()
        terms.sort(key=len)
        return set.intersection(*terms)

ii_pk = open(inverted_peakrank, [wb], [0])
sla


def find_prefix(root, prefix: str) -> Tuple[bool, int]:
    """
    Check and return 
      1. If the prefix exsists in any of the words we added so far
      2. If yes then how may words actually have the prefix
    """
    node = root
    # If the root node has no children, then return False.
    # Because it means we are trying to search in an empty trie
    if not root.children:
        return False, 0
    for char in prefix:
        char_not_found = True
        # Search through all the children of the present `node`
        for child in node.children:
            if child.char == char:
                # We found the char existing in the child.
                char_not_found = False
                # Assign node as the child containing the char and break
                node = child
                break
        # Return False anyway when we did not find a char.
        if char_not_found:
            return False, 0
    # Well, we are here means we have found the prefix. Return true to indicate that
    # And also the counter of the last node. This indicates how many words have this
    # prefix
    return True, node.counter